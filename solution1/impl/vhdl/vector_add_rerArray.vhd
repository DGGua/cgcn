-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vector_add_rerArray is
port (
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    featrue_length : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_size : IN STD_LOGIC_VECTOR (31 downto 0);
    node_cnt : IN STD_LOGIC_VECTOR (31 downto 0);
    output_data : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    p_read1_ap_vld : IN STD_LOGIC;
    node_cnt_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    output_size_ap_vld : IN STD_LOGIC;
    featrue_length_ap_vld : IN STD_LOGIC;
    output_data_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of vector_add_rerArray is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_p_read_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_p_read_c_write : STD_LOGIC;
    signal entry_proc_U0_p_read1_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_p_read1_c_write : STD_LOGIC;
    signal entry_proc_U0_node_cnt_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_node_cnt_c_write : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_ap_start : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_ap_done : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_ap_continue : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_ap_idle : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_ap_ready : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_output_r_din : STD_LOGIC_VECTOR (31 downto 0);
    signal rerArray_Loop_compute_col_proc2_U0_output_r_write : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_property_input_read : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_weight_input_read : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_featrue_length_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal rerArray_Loop_compute_col_proc2_U0_featrue_length_c_write : STD_LOGIC;
    signal rerArray_Loop_compute_col_proc2_U0_output_size_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal rerArray_Loop_compute_col_proc2_U0_output_size_c_write : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_ap_start : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_ap_done : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_ap_continue : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_ap_idle : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_ap_ready : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_node_cnt_read : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_output_size_read : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_output_data : STD_LOGIC_VECTOR (31 downto 0);
    signal rerArray_Loop_input_batch_proc3_U0_output_data_ap_vld : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_output_r_read : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_featrue_length_read : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_p_read1_read : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_weight_input_din : STD_LOGIC_VECTOR (31 downto 0);
    signal rerArray_Loop_input_batch_proc3_U0_weight_input_write : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_p_read_read : STD_LOGIC;
    signal rerArray_Loop_input_batch_proc3_U0_property_input_din : STD_LOGIC_VECTOR (31 downto 0);
    signal rerArray_Loop_input_batch_proc3_U0_property_input_write : STD_LOGIC;
    signal p_read_c_full_n : STD_LOGIC;
    signal p_read_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_read_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal p_read_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal p_read_c_empty_n : STD_LOGIC;
    signal p_read1_c_full_n : STD_LOGIC;
    signal p_read1_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_read1_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal p_read1_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal p_read1_c_empty_n : STD_LOGIC;
    signal node_cnt_c_full_n : STD_LOGIC;
    signal node_cnt_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal node_cnt_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal node_cnt_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal node_cnt_c_empty_n : STD_LOGIC;
    signal output_full_n : STD_LOGIC;
    signal output_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal output_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal output_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal output_empty_n : STD_LOGIC;
    signal property_input_full_n : STD_LOGIC;
    signal property_input_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal property_input_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal property_input_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal property_input_empty_n : STD_LOGIC;
    signal weight_input_full_n : STD_LOGIC;
    signal weight_input_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_input_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal weight_input_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal weight_input_empty_n : STD_LOGIC;
    signal featrue_length_c_full_n : STD_LOGIC;
    signal featrue_length_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal featrue_length_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal featrue_length_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal featrue_length_c_empty_n : STD_LOGIC;
    signal output_size_c_full_n : STD_LOGIC;
    signal output_size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal output_size_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal output_size_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal output_size_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_rerArray_Loop_compute_col_proc2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_rerArray_Loop_compute_col_proc2_U0_ap_ready : STD_LOGIC;
    signal start_for_rerArray_Loop_input_batch_proc3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rerArray_Loop_input_batch_proc3_U0_full_n : STD_LOGIC;
    signal start_for_rerArray_Loop_input_batch_proc3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rerArray_Loop_input_batch_proc3_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component vector_add_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read_c_full_n : IN STD_LOGIC;
        p_read_c_write : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read1_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read1_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read1_c_full_n : IN STD_LOGIC;
        p_read1_c_write : OUT STD_LOGIC;
        node_cnt : IN STD_LOGIC_VECTOR (31 downto 0);
        node_cnt_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        node_cnt_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        node_cnt_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        node_cnt_c_full_n : IN STD_LOGIC;
        node_cnt_c_write : OUT STD_LOGIC );
    end component;


    component vector_add_rerArray_Loop_compute_col_proc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_size : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        output_r_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        output_r_full_n : IN STD_LOGIC;
        output_r_write : OUT STD_LOGIC;
        featrue_length : IN STD_LOGIC_VECTOR (31 downto 0);
        property_input_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        property_input_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        property_input_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        property_input_empty_n : IN STD_LOGIC;
        property_input_read : OUT STD_LOGIC;
        weight_input_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_input_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        weight_input_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        weight_input_empty_n : IN STD_LOGIC;
        weight_input_read : OUT STD_LOGIC;
        featrue_length_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        featrue_length_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        featrue_length_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        featrue_length_c_full_n : IN STD_LOGIC;
        featrue_length_c_write : OUT STD_LOGIC;
        output_size_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_size_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        output_size_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        output_size_c_full_n : IN STD_LOGIC;
        output_size_c_write : OUT STD_LOGIC );
    end component;


    component vector_add_rerArray_Loop_input_batch_proc3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        node_cnt_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        node_cnt_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        node_cnt_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        node_cnt_empty_n : IN STD_LOGIC;
        node_cnt_read : OUT STD_LOGIC;
        output_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        output_size_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        output_size_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        output_size_empty_n : IN STD_LOGIC;
        output_size_read : OUT STD_LOGIC;
        output_data : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_data_ap_vld : OUT STD_LOGIC;
        output_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        output_r_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        output_r_empty_n : IN STD_LOGIC;
        output_r_read : OUT STD_LOGIC;
        featrue_length_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        featrue_length_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        featrue_length_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        featrue_length_empty_n : IN STD_LOGIC;
        featrue_length_read : OUT STD_LOGIC;
        p_read1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read1_empty_n : IN STD_LOGIC;
        p_read1_read : OUT STD_LOGIC;
        weight_input_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_input_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        weight_input_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        weight_input_full_n : IN STD_LOGIC;
        weight_input_write : OUT STD_LOGIC;
        p_read_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read_empty_n : IN STD_LOGIC;
        p_read_read : OUT STD_LOGIC;
        property_input_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        property_input_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        property_input_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        property_input_full_n : IN STD_LOGIC;
        property_input_write : OUT STD_LOGIC );
    end component;


    component vector_add_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component vector_add_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component vector_add_start_for_rerArray_Loop_input_batch_proc3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component vector_add_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_rerArray_Loop_input_batch_proc3_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        p_read => p_read,
        p_read_c_din => entry_proc_U0_p_read_c_din,
        p_read_c_num_data_valid => p_read_c_num_data_valid,
        p_read_c_fifo_cap => p_read_c_fifo_cap,
        p_read_c_full_n => p_read_c_full_n,
        p_read_c_write => entry_proc_U0_p_read_c_write,
        p_read1 => p_read1,
        p_read1_c_din => entry_proc_U0_p_read1_c_din,
        p_read1_c_num_data_valid => p_read1_c_num_data_valid,
        p_read1_c_fifo_cap => p_read1_c_fifo_cap,
        p_read1_c_full_n => p_read1_c_full_n,
        p_read1_c_write => entry_proc_U0_p_read1_c_write,
        node_cnt => node_cnt,
        node_cnt_c_din => entry_proc_U0_node_cnt_c_din,
        node_cnt_c_num_data_valid => node_cnt_c_num_data_valid,
        node_cnt_c_fifo_cap => node_cnt_c_fifo_cap,
        node_cnt_c_full_n => node_cnt_c_full_n,
        node_cnt_c_write => entry_proc_U0_node_cnt_c_write);

    rerArray_Loop_compute_col_proc2_U0 : component vector_add_rerArray_Loop_compute_col_proc2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => rerArray_Loop_compute_col_proc2_U0_ap_start,
        ap_done => rerArray_Loop_compute_col_proc2_U0_ap_done,
        ap_continue => rerArray_Loop_compute_col_proc2_U0_ap_continue,
        ap_idle => rerArray_Loop_compute_col_proc2_U0_ap_idle,
        ap_ready => rerArray_Loop_compute_col_proc2_U0_ap_ready,
        output_size => output_size,
        output_r_din => rerArray_Loop_compute_col_proc2_U0_output_r_din,
        output_r_num_data_valid => output_num_data_valid,
        output_r_fifo_cap => output_fifo_cap,
        output_r_full_n => output_full_n,
        output_r_write => rerArray_Loop_compute_col_proc2_U0_output_r_write,
        featrue_length => featrue_length,
        property_input_dout => property_input_dout,
        property_input_num_data_valid => property_input_num_data_valid,
        property_input_fifo_cap => property_input_fifo_cap,
        property_input_empty_n => property_input_empty_n,
        property_input_read => rerArray_Loop_compute_col_proc2_U0_property_input_read,
        weight_input_dout => weight_input_dout,
        weight_input_num_data_valid => weight_input_num_data_valid,
        weight_input_fifo_cap => weight_input_fifo_cap,
        weight_input_empty_n => weight_input_empty_n,
        weight_input_read => rerArray_Loop_compute_col_proc2_U0_weight_input_read,
        featrue_length_c_din => rerArray_Loop_compute_col_proc2_U0_featrue_length_c_din,
        featrue_length_c_num_data_valid => featrue_length_c_num_data_valid,
        featrue_length_c_fifo_cap => featrue_length_c_fifo_cap,
        featrue_length_c_full_n => featrue_length_c_full_n,
        featrue_length_c_write => rerArray_Loop_compute_col_proc2_U0_featrue_length_c_write,
        output_size_c_din => rerArray_Loop_compute_col_proc2_U0_output_size_c_din,
        output_size_c_num_data_valid => output_size_c_num_data_valid,
        output_size_c_fifo_cap => output_size_c_fifo_cap,
        output_size_c_full_n => output_size_c_full_n,
        output_size_c_write => rerArray_Loop_compute_col_proc2_U0_output_size_c_write);

    rerArray_Loop_input_batch_proc3_U0 : component vector_add_rerArray_Loop_input_batch_proc3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => rerArray_Loop_input_batch_proc3_U0_ap_start,
        ap_done => rerArray_Loop_input_batch_proc3_U0_ap_done,
        ap_continue => rerArray_Loop_input_batch_proc3_U0_ap_continue,
        ap_idle => rerArray_Loop_input_batch_proc3_U0_ap_idle,
        ap_ready => rerArray_Loop_input_batch_proc3_U0_ap_ready,
        node_cnt_dout => node_cnt_c_dout,
        node_cnt_num_data_valid => node_cnt_c_num_data_valid,
        node_cnt_fifo_cap => node_cnt_c_fifo_cap,
        node_cnt_empty_n => node_cnt_c_empty_n,
        node_cnt_read => rerArray_Loop_input_batch_proc3_U0_node_cnt_read,
        output_size_dout => output_size_c_dout,
        output_size_num_data_valid => output_size_c_num_data_valid,
        output_size_fifo_cap => output_size_c_fifo_cap,
        output_size_empty_n => output_size_c_empty_n,
        output_size_read => rerArray_Loop_input_batch_proc3_U0_output_size_read,
        output_data => rerArray_Loop_input_batch_proc3_U0_output_data,
        output_data_ap_vld => rerArray_Loop_input_batch_proc3_U0_output_data_ap_vld,
        output_r_dout => output_dout,
        output_r_num_data_valid => output_num_data_valid,
        output_r_fifo_cap => output_fifo_cap,
        output_r_empty_n => output_empty_n,
        output_r_read => rerArray_Loop_input_batch_proc3_U0_output_r_read,
        featrue_length_dout => featrue_length_c_dout,
        featrue_length_num_data_valid => featrue_length_c_num_data_valid,
        featrue_length_fifo_cap => featrue_length_c_fifo_cap,
        featrue_length_empty_n => featrue_length_c_empty_n,
        featrue_length_read => rerArray_Loop_input_batch_proc3_U0_featrue_length_read,
        p_read1_dout => p_read1_c_dout,
        p_read1_num_data_valid => p_read1_c_num_data_valid,
        p_read1_fifo_cap => p_read1_c_fifo_cap,
        p_read1_empty_n => p_read1_c_empty_n,
        p_read1_read => rerArray_Loop_input_batch_proc3_U0_p_read1_read,
        weight_input_din => rerArray_Loop_input_batch_proc3_U0_weight_input_din,
        weight_input_num_data_valid => weight_input_num_data_valid,
        weight_input_fifo_cap => weight_input_fifo_cap,
        weight_input_full_n => weight_input_full_n,
        weight_input_write => rerArray_Loop_input_batch_proc3_U0_weight_input_write,
        p_read_dout => p_read_c_dout,
        p_read_num_data_valid => p_read_c_num_data_valid,
        p_read_fifo_cap => p_read_c_fifo_cap,
        p_read_empty_n => p_read_c_empty_n,
        p_read_read => rerArray_Loop_input_batch_proc3_U0_p_read_read,
        property_input_din => rerArray_Loop_input_batch_proc3_U0_property_input_din,
        property_input_num_data_valid => property_input_num_data_valid,
        property_input_fifo_cap => property_input_fifo_cap,
        property_input_full_n => property_input_full_n,
        property_input_write => rerArray_Loop_input_batch_proc3_U0_property_input_write);

    p_read_c_U : component vector_add_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_p_read_c_din,
        if_full_n => p_read_c_full_n,
        if_write => entry_proc_U0_p_read_c_write,
        if_dout => p_read_c_dout,
        if_num_data_valid => p_read_c_num_data_valid,
        if_fifo_cap => p_read_c_fifo_cap,
        if_empty_n => p_read_c_empty_n,
        if_read => rerArray_Loop_input_batch_proc3_U0_p_read_read);

    p_read1_c_U : component vector_add_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_p_read1_c_din,
        if_full_n => p_read1_c_full_n,
        if_write => entry_proc_U0_p_read1_c_write,
        if_dout => p_read1_c_dout,
        if_num_data_valid => p_read1_c_num_data_valid,
        if_fifo_cap => p_read1_c_fifo_cap,
        if_empty_n => p_read1_c_empty_n,
        if_read => rerArray_Loop_input_batch_proc3_U0_p_read1_read);

    node_cnt_c_U : component vector_add_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_node_cnt_c_din,
        if_full_n => node_cnt_c_full_n,
        if_write => entry_proc_U0_node_cnt_c_write,
        if_dout => node_cnt_c_dout,
        if_num_data_valid => node_cnt_c_num_data_valid,
        if_fifo_cap => node_cnt_c_fifo_cap,
        if_empty_n => node_cnt_c_empty_n,
        if_read => rerArray_Loop_input_batch_proc3_U0_node_cnt_read);

    output_U : component vector_add_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rerArray_Loop_compute_col_proc2_U0_output_r_din,
        if_full_n => output_full_n,
        if_write => rerArray_Loop_compute_col_proc2_U0_output_r_write,
        if_dout => output_dout,
        if_num_data_valid => output_num_data_valid,
        if_fifo_cap => output_fifo_cap,
        if_empty_n => output_empty_n,
        if_read => rerArray_Loop_input_batch_proc3_U0_output_r_read);

    property_input_U : component vector_add_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rerArray_Loop_input_batch_proc3_U0_property_input_din,
        if_full_n => property_input_full_n,
        if_write => rerArray_Loop_input_batch_proc3_U0_property_input_write,
        if_dout => property_input_dout,
        if_num_data_valid => property_input_num_data_valid,
        if_fifo_cap => property_input_fifo_cap,
        if_empty_n => property_input_empty_n,
        if_read => rerArray_Loop_compute_col_proc2_U0_property_input_read);

    weight_input_U : component vector_add_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rerArray_Loop_input_batch_proc3_U0_weight_input_din,
        if_full_n => weight_input_full_n,
        if_write => rerArray_Loop_input_batch_proc3_U0_weight_input_write,
        if_dout => weight_input_dout,
        if_num_data_valid => weight_input_num_data_valid,
        if_fifo_cap => weight_input_fifo_cap,
        if_empty_n => weight_input_empty_n,
        if_read => rerArray_Loop_compute_col_proc2_U0_weight_input_read);

    featrue_length_c_U : component vector_add_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rerArray_Loop_compute_col_proc2_U0_featrue_length_c_din,
        if_full_n => featrue_length_c_full_n,
        if_write => rerArray_Loop_compute_col_proc2_U0_featrue_length_c_write,
        if_dout => featrue_length_c_dout,
        if_num_data_valid => featrue_length_c_num_data_valid,
        if_fifo_cap => featrue_length_c_fifo_cap,
        if_empty_n => featrue_length_c_empty_n,
        if_read => rerArray_Loop_input_batch_proc3_U0_featrue_length_read);

    output_size_c_U : component vector_add_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rerArray_Loop_compute_col_proc2_U0_output_size_c_din,
        if_full_n => output_size_c_full_n,
        if_write => rerArray_Loop_compute_col_proc2_U0_output_size_c_write,
        if_dout => output_size_c_dout,
        if_num_data_valid => output_size_c_num_data_valid,
        if_fifo_cap => output_size_c_fifo_cap,
        if_empty_n => output_size_c_empty_n,
        if_read => rerArray_Loop_input_batch_proc3_U0_output_size_read);

    start_for_rerArray_Loop_input_batch_proc3_U0_U : component vector_add_start_for_rerArray_Loop_input_batch_proc3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_rerArray_Loop_input_batch_proc3_U0_din,
        if_full_n => start_for_rerArray_Loop_input_batch_proc3_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_rerArray_Loop_input_batch_proc3_U0_dout,
        if_empty_n => start_for_rerArray_Loop_input_batch_proc3_U0_empty_n,
        if_read => rerArray_Loop_input_batch_proc3_U0_ap_ready);





    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_rerArray_Loop_compute_col_proc2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_rerArray_Loop_compute_col_proc2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_rerArray_Loop_compute_col_proc2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_rerArray_Loop_compute_col_proc2_U0_ap_ready <= ap_sync_rerArray_Loop_compute_col_proc2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= rerArray_Loop_input_batch_proc3_U0_ap_done;
    ap_idle <= (rerArray_Loop_input_batch_proc3_U0_ap_idle and rerArray_Loop_compute_col_proc2_U0_ap_idle and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_rerArray_Loop_compute_col_proc2_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    ap_sync_rerArray_Loop_compute_col_proc2_U0_ap_ready <= (rerArray_Loop_compute_col_proc2_U0_ap_ready or ap_sync_reg_rerArray_Loop_compute_col_proc2_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    output_data <= rerArray_Loop_input_batch_proc3_U0_output_data;
    output_data_ap_vld <= rerArray_Loop_input_batch_proc3_U0_output_data_ap_vld;
    rerArray_Loop_compute_col_proc2_U0_ap_continue <= ap_const_logic_1;
    rerArray_Loop_compute_col_proc2_U0_ap_start <= ((ap_sync_reg_rerArray_Loop_compute_col_proc2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    rerArray_Loop_input_batch_proc3_U0_ap_continue <= ap_continue;
    rerArray_Loop_input_batch_proc3_U0_ap_start <= start_for_rerArray_Loop_input_batch_proc3_U0_empty_n;
    start_for_rerArray_Loop_input_batch_proc3_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
