// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vector_add_rerArray_Loop_compute_col_proc2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        output_size,
        output_r_din,
        output_r_num_data_valid,
        output_r_fifo_cap,
        output_r_full_n,
        output_r_write,
        featrue_length,
        property_input_dout,
        property_input_num_data_valid,
        property_input_fifo_cap,
        property_input_empty_n,
        property_input_read,
        weight_input_dout,
        weight_input_num_data_valid,
        weight_input_fifo_cap,
        weight_input_empty_n,
        weight_input_read,
        featrue_length_c_din,
        featrue_length_c_num_data_valid,
        featrue_length_c_fifo_cap,
        featrue_length_c_full_n,
        featrue_length_c_write,
        output_size_c_din,
        output_size_c_num_data_valid,
        output_size_c_fifo_cap,
        output_size_c_full_n,
        output_size_c_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] output_size;
output  [31:0] output_r_din;
input  [1:0] output_r_num_data_valid;
input  [1:0] output_r_fifo_cap;
input   output_r_full_n;
output   output_r_write;
input  [31:0] featrue_length;
input  [31:0] property_input_dout;
input  [1:0] property_input_num_data_valid;
input  [1:0] property_input_fifo_cap;
input   property_input_empty_n;
output   property_input_read;
input  [31:0] weight_input_dout;
input  [1:0] weight_input_num_data_valid;
input  [1:0] weight_input_fifo_cap;
input   weight_input_empty_n;
output   weight_input_read;
output  [31:0] featrue_length_c_din;
input  [1:0] featrue_length_c_num_data_valid;
input  [1:0] featrue_length_c_fifo_cap;
input   featrue_length_c_full_n;
output   featrue_length_c_write;
output  [31:0] output_size_c_din;
input  [1:0] output_size_c_num_data_valid;
input  [1:0] output_size_c_fifo_cap;
input   output_size_c_full_n;
output   output_size_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_write;
reg property_input_read;
reg weight_input_read;
reg featrue_length_c_write;
reg output_size_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    output_r_blk_n;
wire    ap_CS_fsm_state4;
reg    featrue_length_c_blk_n;
reg    output_size_c_blk_n;
wire   [33:0] tmp_4_fu_115_p3;
reg   [33:0] tmp_4_reg_169;
wire    grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_start;
wire    grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_done;
wire    grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_idle;
wire    grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_ready;
wire    grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_property_input_read;
wire    grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_weight_input_read;
wire   [31:0] grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_sum_out;
wire    grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_sum_out_ap_vld;
reg    grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln27_fu_131_p2;
wire    ap_CS_fsm_state3;
reg   [33:0] indvar_flatten_fu_62;
wire   [33:0] add_ln27_fu_136_p2;
reg    ap_block_state1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_start_reg = 1'b0;
end

vector_add_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_start),
    .ap_done(grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_done),
    .ap_idle(grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_idle),
    .ap_ready(grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_ready),
    .property_input_dout(property_input_dout),
    .property_input_num_data_valid(2'd0),
    .property_input_fifo_cap(2'd0),
    .property_input_empty_n(property_input_empty_n),
    .property_input_read(grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_property_input_read),
    .weight_input_dout(weight_input_dout),
    .weight_input_num_data_valid(2'd0),
    .weight_input_fifo_cap(2'd0),
    .weight_input_empty_n(weight_input_empty_n),
    .weight_input_read(grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_weight_input_read),
    .featrue_length(featrue_length),
    .sum_out(grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_sum_out),
    .sum_out_ap_vld(grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_sum_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln27_fu_131_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln27_fu_131_p2 == 1'd0))) begin
            grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_start_reg <= 1'b1;
        end else if ((grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_ready == 1'b1)) begin
            grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (featrue_length_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_62 <= 34'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln27_fu_131_p2 == 1'd0))) begin
        indvar_flatten_fu_62 <= add_ln27_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_4_reg_169[33 : 2] <= tmp_4_fu_115_p3[33 : 2];
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (featrue_length_c_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((output_r_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln27_fu_131_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln27_fu_131_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        featrue_length_c_blk_n = featrue_length_c_full_n;
    end else begin
        featrue_length_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (featrue_length_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        featrue_length_c_write = 1'b1;
    end else begin
        featrue_length_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_blk_n = output_r_full_n;
    end else begin
        output_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((output_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_write = 1'b1;
    end else begin
        output_r_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_size_c_blk_n = output_size_c_full_n;
    end else begin
        output_size_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (featrue_length_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_size_c_write = 1'b1;
    end else begin
        output_size_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        property_input_read = grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_property_input_read;
    end else begin
        property_input_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_input_read = grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_weight_input_read;
    end else begin
        weight_input_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (featrue_length_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln27_fu_131_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((output_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_fu_136_p2 = (indvar_flatten_fu_62 + 34'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (output_size_c_full_n == 1'b0) | (featrue_length_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign featrue_length_c_din = featrue_length;

assign grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_start = grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_ap_start_reg;

assign icmp_ln27_fu_131_p2 = ((indvar_flatten_fu_62 == tmp_4_reg_169) ? 1'b1 : 1'b0);

assign output_r_din = grp_rerArray_Loop_compute_col_proc2_Pipeline_PE_Compute_fu_105_sum_out;

assign output_size_c_din = output_size;

assign tmp_4_fu_115_p3 = {{output_size}, {2'd0}};

always @ (posedge ap_clk) begin
    tmp_4_reg_169[1:0] <= 2'b00;
end

endmodule //vector_add_rerArray_Loop_compute_col_proc2
