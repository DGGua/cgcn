// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vector_add_vector_add,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.050000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=40319,HLS_SYN_LUT=43565,HLS_VERSION=2022_1}" *)

module vector_add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        featrue_data,
        featrue_length,
        weight_array,
        output_size,
        node_cnt,
        output_data,
        output_data_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] featrue_data;
input  [31:0] featrue_length;
input  [31:0] weight_array;
input  [31:0] output_size;
input  [31:0] node_cnt;
output  [31:0] output_data;
output   output_data_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_rerArray_fu_64_output_data;
wire    grp_rerArray_fu_64_ap_start;
wire    grp_rerArray_fu_64_output_data_ap_vld;
wire    grp_rerArray_fu_64_ap_done;
wire    grp_rerArray_fu_64_ap_ready;
wire    grp_rerArray_fu_64_ap_idle;
reg    grp_rerArray_fu_64_ap_continue;
reg    grp_rerArray_fu_64_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_rerArray_fu_64_ap_ready;
wire    ap_sync_grp_rerArray_fu_64_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_rerArray_fu_64_ap_ready;
reg    ap_sync_reg_grp_rerArray_fu_64_ap_done;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_rerArray_fu_64_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_rerArray_fu_64_ap_ready = 1'b0;
#0 ap_sync_reg_grp_rerArray_fu_64_ap_done = 1'b0;
end

vector_add_rerArray grp_rerArray_fu_64(
    .p_read(featrue_data),
    .featrue_length(featrue_length),
    .p_read1(weight_array),
    .output_size(output_size),
    .node_cnt(node_cnt),
    .output_data(grp_rerArray_fu_64_output_data),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .p_read_ap_vld(1'b1),
    .p_read1_ap_vld(1'b1),
    .node_cnt_ap_vld(1'b1),
    .ap_start(grp_rerArray_fu_64_ap_start),
    .output_size_ap_vld(1'b1),
    .featrue_length_ap_vld(1'b1),
    .output_data_ap_vld(grp_rerArray_fu_64_output_data_ap_vld),
    .ap_done(grp_rerArray_fu_64_ap_done),
    .ap_ready(grp_rerArray_fu_64_ap_ready),
    .ap_idle(grp_rerArray_fu_64_ap_idle),
    .ap_continue(grp_rerArray_fu_64_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_rerArray_fu_64_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_rerArray_fu_64_ap_done <= 1'b0;
        end else if ((grp_rerArray_fu_64_ap_done == 1'b1)) begin
            ap_sync_reg_grp_rerArray_fu_64_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_rerArray_fu_64_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_rerArray_fu_64_ap_ready <= 1'b0;
        end else if ((grp_rerArray_fu_64_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_rerArray_fu_64_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rerArray_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_rerArray_fu_64_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_rerArray_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_rerArray_fu_64_ap_ready == 1'b1)) begin
            grp_rerArray_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_rerArray_fu_64_ap_continue = 1'b1;
    end else begin
        grp_rerArray_fu_64_ap_continue = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_rerArray_fu_64_ap_ready & ap_sync_grp_rerArray_fu_64_ap_done) == 1'b0);
end

assign ap_sync_grp_rerArray_fu_64_ap_done = (grp_rerArray_fu_64_ap_done | ap_sync_reg_grp_rerArray_fu_64_ap_done);

assign ap_sync_grp_rerArray_fu_64_ap_ready = (grp_rerArray_fu_64_ap_ready | ap_sync_reg_grp_rerArray_fu_64_ap_ready);

assign grp_rerArray_fu_64_ap_start = grp_rerArray_fu_64_ap_start_reg;

assign output_data = grp_rerArray_fu_64_output_data;

assign output_data_ap_vld = grp_rerArray_fu_64_output_data_ap_vld;

endmodule //vector_add
